name: Label Triggered Agent Invocation

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]

jobs:
  invoke-agent:
    runs-on: ubuntu-latest
    
    # Only run if specific labels are applied
    if: |
      contains(github.event.label.name, 'ai-agent:') ||
      contains(github.event.label.name, 'invoke:') ||
      github.event.label.name == 'needs-review' ||
      github.event.label.name == 'needs-triage' ||
      github.event.label.name == 'bug-analysis' ||
      github.event.label.name == 'feature-enhancement'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd .github/memory-manager
        pip install -r requirements.txt
    
    - name: Determine agent based on label
      id: determine-agent
      run: |
        LABEL="${{ github.event.label.name }}"
        AGENT=""
        SCENARIO=""
        
        case "$LABEL" in
          "ai-agent:code-reviewer"|"needs-review")
            AGENT="code-reviewer"
            SCENARIO="code-review"
            ;;
          "ai-agent:workflow-master"|"feature-enhancement")
            AGENT="workflow-master"
            SCENARIO="workflow-orchestration"
            ;;
          "ai-agent:orchestrator"|"needs-triage")
            AGENT="orchestrator-agent"
            SCENARIO="issue-triage"
            ;;
          "ai-agent:prompt-writer")
            AGENT="prompt-writer"
            SCENARIO="prompt-generation"
            ;;
          "bug-analysis")
            AGENT="code-reviewer"
            SCENARIO="bug-analysis"
            ;;
          ai-agent:*)
            # Extract agent name from label (e.g., "ai-agent:custom-agent")
            AGENT="${LABEL#ai-agent:}"
            SCENARIO="custom"
            ;;
          invoke:*)
            # Extract agent name from label (e.g., "invoke:memory-manager")
            AGENT="${LABEL#invoke:}"
            SCENARIO="invocation"
            ;;
          *)
            echo "No matching agent for label: $LABEL"
            exit 0
            ;;
        esac
        
        echo "agent=$AGENT" >> $GITHUB_OUTPUT
        echo "scenario=$SCENARIO" >> $GITHUB_OUTPUT
        echo "Selected agent: $AGENT for scenario: $SCENARIO"
    
    - name: Update memory with event context
      if: steps.determine-agent.outputs.agent != ''
      run: |
        cd .github/memory-manager
        
        # Prepare context for the agent
        EVENT_TYPE="${{ github.event_name }}"
        ITEM_TYPE="${{ github.event.issue && 'issue' || 'pull_request' }}"
        ITEM_NUMBER="${{ github.event.issue.number || github.event.pull_request.number }}"
        ITEM_TITLE="${{ github.event.issue.title || github.event.pull_request.title }}"
        LABEL="${{ github.event.label.name }}"
        AGENT="${{ steps.determine-agent.outputs.agent }}"
        SCENARIO="${{ steps.determine-agent.outputs.scenario }}"
        
        CONTEXT="GitHub Actions triggered agent invocation:
        
        **Event Details:**
        - Event: $EVENT_TYPE ($ITEM_TYPE labeled)
        - $ITEM_TYPE: #$ITEM_NUMBER - $ITEM_TITLE
        - Label Applied: $LABEL
        - Agent Invoked: $AGENT
        - Scenario: $SCENARIO
        - Repository: ${{ github.repository }}
        - Actor: ${{ github.actor }}
        - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        **Agent Context:**
        The $AGENT agent should process this $ITEM_TYPE based on the $LABEL label trigger.
        
        **Next Steps:**
        1. Agent should analyze the $ITEM_TYPE content
        2. Apply appropriate processing based on scenario: $SCENARIO
        3. Take necessary actions (comments, reviews, workflow initiation)
        4. Update memory with results
        
        **Links:**
        - $ITEM_TYPE URL: ${{ github.event.issue.html_url || github.event.pull_request.html_url }}
        - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        python simple_memory_cli.py update "$CONTEXT" \
          --section current-goals \
          --agent "GitHubActions-LabelTrigger" \
          --priority high \
          --related "#$ITEM_NUMBER"
    
    - name: Create agent invocation comment
      if: steps.determine-agent.outputs.agent != ''
      uses: actions/github-script@v7
      with:
        script: |
          const agent = '${{ steps.determine-agent.outputs.agent }}';
          const scenario = '${{ steps.determine-agent.outputs.scenario }}';
          const label = '${{ github.event.label.name }}';
          
          const itemType = context.payload.issue ? 'issue' : 'pull_request';
          const itemNumber = context.payload.issue?.number || context.payload.pull_request?.number;
          
          const commentBody = `ðŸ¤– **AI Agent Invocation Triggered**
          
          **Event:** Label "${label}" applied to ${itemType} #${itemNumber}
          **Agent:** \`${agent}\`
          **Scenario:** \`${scenario}\`
          **Timestamp:** ${new Date().toISOString()}
          
          ---
          
          ### Agent Instructions
          
          The **${agent}** agent has been invoked to process this ${itemType} based on the applied label.
          
          #### Recommended Agent Command:
          \`\`\`
          /agent:${agent}
          
          Context: GitHub Actions triggered processing for ${itemType} #${itemNumber}
          Label: ${label}
          Scenario: ${scenario}
          
          Please analyze this ${itemType} and take appropriate action based on the scenario.
          \`\`\`
          
          #### Manual Invocation (if needed):
          If automatic processing fails, you can manually invoke the agent using:
          - Claude Code: \`/agent:${agent}\`
          - CLI: Review the workflow logs for detailed context
          
          ---
          
          *This comment was automatically generated by GitHub Actions*
          `;
          
          if (context.payload.issue) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: itemNumber,
              body: commentBody
            });
          } else {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: itemNumber,
              body: commentBody,
              event: 'COMMENT'
            });
          }
    
    - name: Log invocation details
      if: steps.determine-agent.outputs.agent != ''
      run: |
        echo "=== Agent Invocation Summary ==="
        echo "Agent: ${{ steps.determine-agent.outputs.agent }}"
        echo "Scenario: ${{ steps.determine-agent.outputs.scenario }}"
        echo "Label: ${{ github.event.label.name }}"
        echo "Item: ${{ github.event.issue.number || github.event.pull_request.number }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "============================"