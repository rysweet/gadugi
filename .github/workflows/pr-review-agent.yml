name: PR Ready for Review Agent

on:
  pull_request:
    types: 
      - ready_for_review
      - opened
    # Only trigger when PR is not a draft
    
  pull_request_review:
    types: [submitted]

jobs:
  invoke-review-agent:
    runs-on: ubuntu-latest
    
    # Only run for non-draft PRs or when a review is requested
    if: |
      (github.event.pull_request.draft == false && 
       (github.event.action == 'ready_for_review' || github.event.action == 'opened')) ||
      github.event.review.state == 'changes_requested'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        # Fetch full history for comprehensive analysis
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd .github/memory-manager
        pip install -r requirements.txt
    
    - name: Analyze PR for agent selection
      id: analyze-pr
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_BODY="${{ github.event.pull_request.body }}"
        PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
        PR_FILES_CHANGED="${{ github.event.pull_request.changed_files }}"
        PR_ADDITIONS="${{ github.event.pull_request.additions }}"
        PR_DELETIONS="${{ github.event.pull_request.deletions }}"
        
        # Determine appropriate agent based on PR characteristics
        AGENT="code-reviewer"  # Default agent
        SCENARIO="pr-review"
        PRIORITY="medium"
        
        # Analyze PR content to determine best agent and priority
        if [[ "$PR_TITLE" =~ [Ff]eat.*|[Ff]eature.* ]]; then
          AGENT="workflow-master"
          SCENARIO="feature-review"
          PRIORITY="high"
        elif [[ "$PR_TITLE" =~ [Bb]ug.*|[Ff]ix.* ]]; then
          AGENT="code-reviewer"
          SCENARIO="bug-fix-review"
          PRIORITY="high"
        elif [[ "$PR_TITLE" =~ [Dd]ocs.*|[Dd]ocumentation.* ]]; then
          AGENT="prompt-writer"
          SCENARIO="documentation-review"  
          PRIORITY="medium"
        elif [[ "$PR_FILES_CHANGED" -gt 20 ]] || [[ "$PR_ADDITIONS" -gt 500 ]]; then
          AGENT="orchestrator-agent"
          SCENARIO="large-pr-review"
          PRIORITY="high"
        fi
        
        # Check for specific labels that override agent selection
        if [[ "$PR_LABELS" == *"ai-agent:"* ]]; then
          # Extract agent from label
          LABEL_AGENT=$(echo "$PR_LABELS" | grep -o 'ai-agent:[^,]*' | head -1 | cut -d: -f2)
          if [[ -n "$LABEL_AGENT" ]]; then
            AGENT="$LABEL_AGENT"
            SCENARIO="label-specified"
          fi
        fi
        
        echo "agent=$AGENT" >> $GITHUB_OUTPUT
        echo "scenario=$SCENARIO" >> $GITHUB_OUTPUT
        echo "priority=$PRIORITY" >> $GITHUB_OUTPUT
        
        echo "Selected agent: $AGENT for scenario: $SCENARIO (priority: $PRIORITY)"
        echo "PR Analysis: $PR_FILES_CHANGED files, +$PR_ADDITIONS/-$PR_DELETIONS lines"
    
    - name: Get PR diff and files for analysis
      id: pr-analysis
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        
        # Get list of changed files
        gh pr view "$PR_NUMBER" --json files --jq '.files[].path' > /tmp/changed_files.txt
        
        # Get PR diff (limited to avoid huge outputs)
        gh pr diff "$PR_NUMBER" --name-only > /tmp/diff_files.txt
        
        # Count different types of changes
        PYTHON_FILES=$(grep -c '\.py$' /tmp/changed_files.txt || echo "0")
        MARKDOWN_FILES=$(grep -c '\.md$' /tmp/changed_files.txt || echo "0")
        YAML_FILES=$(grep -c '\.ya?ml$' /tmp/changed_files.txt || echo "0")
        
        echo "python_files=$PYTHON_FILES" >> $GITHUB_OUTPUT
        echo "markdown_files=$MARKDOWN_FILES" >> $GITHUB_OUTPUT
        echo "yaml_files=$YAML_FILES" >> $GITHUB_OUTPUT
        
        # Store file list for agent context
        CHANGED_FILES=$(cat /tmp/changed_files.txt | head -20 | tr '\n' ',' | sed 's/,$//')
        echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update memory with PR context
      run: |
        cd .github/memory-manager
        
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_AUTHOR="${{ github.event.pull_request.user.login }}"
        PR_URL="${{ github.event.pull_request.html_url }}"
        AGENT="${{ steps.analyze-pr.outputs.agent }}"
        SCENARIO="${{ steps.analyze-pr.outputs.scenario }}"
        PRIORITY="${{ steps.analyze-pr.outputs.priority }}"
        CHANGED_FILES="${{ steps.pr-analysis.outputs.changed_files }}"
        
        CONTEXT="PR Ready for Review - Agent Invocation:
        
        **PR Details:**
        - PR #$PR_NUMBER: $PR_TITLE
        - Author: $PR_AUTHOR
        - URL: $PR_URL
        - Files Changed: ${{ github.event.pull_request.changed_files }}
        - Lines: +${{ github.event.pull_request.additions }}/-${{ github.event.pull_request.deletions }}
        - Repository: ${{ github.repository }}
        - Branch: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}
        
        **Analysis Results:**
        - Selected Agent: $AGENT
        - Review Scenario: $SCENARIO
        - Priority: $PRIORITY
        - Python Files: ${{ steps.pr-analysis.outputs.python_files }}
        - Markdown Files: ${{ steps.pr-analysis.outputs.markdown_files }}
        - YAML Files: ${{ steps.pr-analysis.outputs.yaml_files }}
        - Key Files: $CHANGED_FILES
        
        **Agent Instructions:**
        The $AGENT should perform a comprehensive review focusing on:
        1. Code quality and best practices
        2. Security considerations
        3. Documentation completeness
        4. Test coverage
        5. Integration impact
        
        **Workflow Trigger:**
        - Event: ${{ github.event.action }}
        - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        python simple_memory_cli.py update "$CONTEXT" \
          --section current-goals \
          --agent "GitHubActions-PRReview" \
          --priority "$PRIORITY" \
          --related "#$PR_NUMBER" \
          --files "$CHANGED_FILES"
    
    - name: Create comprehensive review request comment
      uses: actions/github-script@v7
      with:
        script: |
          const agent = '${{ steps.analyze-pr.outputs.agent }}';
          const scenario = '${{ steps.analyze-pr.outputs.scenario }}';
          const priority = '${{ steps.analyze-pr.outputs.priority }}';
          const changedFiles = '${{ steps.pr-analysis.outputs.changed_files }}';
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const filesChanged = context.payload.pull_request.changed_files;
          const additions = context.payload.pull_request.additions;
          const deletions = context.payload.pull_request.deletions;
          
          const pythonFiles = '${{ steps.pr-analysis.outputs.python_files }}';
          const markdownFiles = '${{ steps.pr-analysis.outputs.markdown_files }}';
          const yamlFiles = '${{ steps.pr-analysis.outputs.yaml_files }}';
          
          const reviewRequestBody = `🤖 **AI Code Review Request**
          
          **PR Ready for Review:** #${prNumber} - ${prTitle}
          
          ### 📊 PR Analysis
          - **Files Changed:** ${filesChanged}
          - **Lines:** +${additions}/-${deletions}
          - **File Types:** Python (${pythonFiles}), Markdown (${markdownFiles}), YAML (${yamlFiles})
          
          ### 🎯 Agent Assignment
          - **Agent:** \`${agent}\`
          - **Scenario:** \`${scenario}\`
          - **Priority:** ${priority}
          
          ---
          
          ### 🔍 Recommended Review Process
          
          #### Agent Command:
          \`\`\`
          /agent:${agent}
          
          Please perform a comprehensive code review for PR #${prNumber}.
          
          Focus Areas:
          - Code quality and best practices
          - Security considerations  
          - Documentation completeness
          - Test coverage
          - Integration impact
          
          PR Context:
          - Title: ${prTitle}
          - Files: ${filesChanged}
          - Scenario: ${scenario}
          \`\`\`
          
          #### Review Checklist:
          - [ ] Code follows project standards
          - [ ] Security best practices implemented
          - [ ] Tests cover new functionality
          - [ ] Documentation is updated
          - [ ] Breaking changes are documented
          - [ ] Performance impact considered
          
          ### 📁 Key Files to Review:
          ${changedFiles.split(',').slice(0, 10).map(file => `- \`${file}\``).join('\n')}
          ${filesChanged > 10 ? `\n_...and ${filesChanged - 10} more files_` : ''}
          
          ---
          
          ### 🛠️ Manual Review Commands
          If automatic processing is needed, use these commands:
          
          **Full Review:**
          \`\`\`bash
          /agent:code-reviewer
          \`\`\`
          
          **Large PR Orchestration:**
          \`\`\`bash
          /agent:orchestrator-agent
          \`\`\`
          
          **Feature Review:**
          \`\`\`bash
          /agent:workflow-master
          \`\`\`
          
          ---
          
          *🚀 This review request was automatically generated by GitHub Actions based on PR characteristics and content analysis.*
          `;
          
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            body: reviewRequestBody,
            event: 'COMMENT'
          });
    
    - name: Auto-assign reviewers based on file types
      uses: actions/github-script@v7
      if: github.event.action == 'ready_for_review' || github.event.action == 'opened'
      with:
        script: |
          const pythonFiles = parseInt('${{ steps.pr-analysis.outputs.python_files }}');
          const markdownFiles = parseInt('${{ steps.pr-analysis.outputs.markdown_files }}');
          const yamlFiles = parseInt('${{ steps.pr-analysis.outputs.yaml_files }}');
          
          // Auto-assign reviewers based on file types (if reviewers are configured)
          const reviewers = [];
          
          // This would be configured based on your team structure
          if (pythonFiles > 0) {
            // Add Python experts as reviewers
            // reviewers.push('python-expert-username');
          }
          
          if (markdownFiles > 0) {
            // Add documentation reviewers
            // reviewers.push('docs-reviewer-username');  
          }
          
          if (yamlFiles > 0) {
            // Add infrastructure/config reviewers
            // reviewers.push('devops-reviewer-username');
          }
          
          // For now, just log what would be done
          console.log('Would auto-assign reviewers:', reviewers);
          console.log('File analysis: Python:', pythonFiles, 'Markdown:', markdownFiles, 'YAML:', yamlFiles);
          
          // Uncomment to actually assign reviewers:
          // if (reviewers.length > 0) {
          //   await github.rest.pulls.requestReviewers({
          //     owner: context.repo.owner,
          //     repo: context.repo.repo,
          //     pull_number: context.payload.pull_request.number,
          //     reviewers: reviewers
          //   });
          // }
    
    - name: Log PR review invocation
      run: |
        echo "=== PR Review Agent Invocation ==="
        echo "PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"
        echo "Agent: ${{ steps.analyze-pr.outputs.agent }}"
        echo "Scenario: ${{ steps.analyze-pr.outputs.scenario }}"
        echo "Priority: ${{ steps.analyze-pr.outputs.priority }}"
        echo "Files Changed: ${{ github.event.pull_request.changed_files }}"
        echo "Lines: +${{ github.event.pull_request.additions }}/-${{ github.event.pull_request.deletions }}"
        echo "Author: ${{ github.event.pull_request.user.login }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "================================"