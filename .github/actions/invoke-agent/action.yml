name: 'Invoke Gadugi Agent'
description: 'Reusable action to invoke Gadugi AI agents with context and memory management'
branding:
  icon: 'cpu'
  color: 'blue'

inputs:
  agent:
    description: 'Name of the agent to invoke (e.g., code-reviewer, workflow-master)'
    required: true
  scenario:
    description: 'Scenario context for the agent (e.g., pr-review, issue-triage)'
    required: true
  priority:
    description: 'Priority level: high, medium, low'
    required: false
    default: 'medium'
  github-token:
    description: 'GitHub token for API access'
    required: true
  target-type:
    description: 'Type of target: issue, pull_request, repository'
    required: true
  target-number:
    description: 'Issue or PR number (if applicable)'
    required: false
  context-data:
    description: 'Additional context data as JSON string'
    required: false
    default: '{}'
  memory-section:
    description: 'Memory section to update'
    required: false
    default: 'current-goals'
  auto-comment:
    description: 'Whether to create an automatic comment with agent instructions'
    required: false
    default: 'true'

outputs:
  success:
    description: 'Whether the agent invocation was successful'
    value: ${{ steps.invoke-agent.outputs.success }}
  agent-command:
    description: 'The generated agent command'
    value: ${{ steps.invoke-agent.outputs.agent-command }}
  memory-updated:
    description: 'Whether memory was updated successfully'
    value: ${{ steps.update-memory.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        # Validate required inputs
        if [[ -z "${{ inputs.agent }}" ]]; then
          echo "‚ùå Error: agent input is required"
          exit 1
        fi
        
        if [[ -z "${{ inputs.scenario }}" ]]; then
          echo "‚ùå Error: scenario input is required"
          exit 1
        fi
        
        if [[ -z "${{ inputs.target-type }}" ]]; then
          echo "‚ùå Error: target-type input is required"
          exit 1
        fi
        
        # Validate agent name against known agents
        VALID_AGENTS=("code-reviewer" "workflow-master" "orchestrator-agent" "prompt-writer" "code-review-response" "agent-manager" "task-analyzer" "worktree-manager" "execution-monitor")
        AGENT="${{ inputs.agent }}"
        
        if [[ ! " ${VALID_AGENTS[@]} " =~ " ${AGENT} " ]]; then
          echo "‚ö†Ô∏è Warning: Agent '$AGENT' is not in the known agent list"
          echo "Known agents: ${VALID_AGENTS[*]}"
        fi
        
        echo "‚úÖ Input validation passed"
        echo "Agent: ${{ inputs.agent }}"
        echo "Scenario: ${{ inputs.scenario }}"
        echo "Priority: ${{ inputs.priority }}"
        echo "Target: ${{ inputs.target-type }}#${{ inputs.target-number }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        if [[ -f ".github/memory-manager/requirements.txt" ]]; then
          cd .github/memory-manager
          pip install -r requirements.txt
        else
          echo "‚ö†Ô∏è Warning: No requirements.txt found - memory features may not work"
        fi

    - name: Generate agent context
      id: generate-context
      shell: bash
      run: |
        # Generate comprehensive context for the agent
        AGENT="${{ inputs.agent }}"
        SCENARIO="${{ inputs.scenario }}"
        PRIORITY="${{ inputs.priority }}"
        TARGET_TYPE="${{ inputs.target-type }}"
        TARGET_NUMBER="${{ inputs.target-number }}"
        CONTEXT_DATA="${{ inputs.context-data }}"
        
        # Parse additional context data
        ADDITIONAL_CONTEXT=""
        if [[ "$CONTEXT_DATA" != "{}" ]]; then
          ADDITIONAL_CONTEXT=$(echo "$CONTEXT_DATA" | jq -r 'to_entries | map("\(.key): \(.value)") | join("\n")' || echo "")
        fi
        
        # Generate agent command - construct line by line to avoid YAML issues
        echo "agent-command<<EOF" >> $GITHUB_OUTPUT
        echo "/agent:$AGENT" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Context: GitHub Actions automated invocation" >> $GITHUB_OUTPUT
        echo "Target: $TARGET_TYPE$([ -n "$TARGET_NUMBER" ] && echo " #$TARGET_NUMBER")" >> $GITHUB_OUTPUT
        echo "Scenario: $SCENARIO" >> $GITHUB_OUTPUT
        echo "Priority: $PRIORITY" >> $GITHUB_OUTPUT
        echo "Repository: ${{ github.repository }}" >> $GITHUB_OUTPUT
        echo "Triggered by: ${{ github.actor }}" >> $GITHUB_OUTPUT
        echo "Workflow: ${{ github.workflow }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        if [[ -n "$ADDITIONAL_CONTEXT" ]]; then
          echo "Additional Context:" >> $GITHUB_OUTPUT
          echo "$ADDITIONAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
        fi
        echo "Please analyze and process this $TARGET_TYPE based on the $SCENARIO scenario." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "context-summary<<EOF" >> $GITHUB_OUTPUT
        echo "Agent: $AGENT | Scenario: $SCENARIO | Priority: $PRIORITY | Target: $TARGET_TYPE$([ -n "$TARGET_NUMBER" ] && echo " #$TARGET_NUMBER")" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Generated agent context successfully"

    - name: Update memory with invocation context
      id: update-memory
      shell: bash
      run: |
        SUCCESS="false"
        
        if [[ -f ".github/memory-manager/simple_memory_cli.py" ]]; then
          cd .github/memory-manager
          
          AGENT="${{ inputs.agent }}"
          SCENARIO="${{ inputs.scenario }}"
          PRIORITY="${{ inputs.priority }}"
          TARGET_TYPE="${{ inputs.target-type }}"
          TARGET_NUMBER="${{ inputs.target-number }}"
          MEMORY_SECTION="${{ inputs.memory-section }}"
          
          # Build memory content line by line to avoid YAML issues
          MEMORY_CONTENT="Agent Invocation via GitHub Actions:

        Invocation Details:
        - Agent: $AGENT
        - Scenario: $SCENARIO
        - Priority: $PRIORITY
        - Target: $TARGET_TYPE$([ -n "$TARGET_NUMBER" ] && echo " #$TARGET_NUMBER")
        - Memory Section: $MEMORY_SECTION

        Context:
        - Repository: ${{ github.repository }}
        - Workflow: ${{ github.workflow }}
        - Triggered by: ${{ github.actor }}
        - Run ID: ${{ github.run_id }}
        - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        Next Steps:
        1. Agent should process the target based on scenario
        2. Update memory with results  
        3. Take appropriate actions (comments, reviews, etc.)
        4. Log completion status"

          # Update memory
          if python simple_memory_cli.py update "$MEMORY_CONTENT" \
            --section "$MEMORY_SECTION" \
            --agent "GitHubActions-AgentInvoker" \
            --priority "$PRIORITY" \
            $([ -n "$TARGET_NUMBER" ] && echo "--related \"#$TARGET_NUMBER\""); then
            SUCCESS="true"
            echo "‚úÖ Memory updated successfully"
          else
            echo "‚ùå Failed to update memory"
          fi
        else
          echo "‚ö†Ô∏è Memory manager not available - skipping memory update"
          SUCCESS="partial"
        fi
        
        echo "success=$SUCCESS" >> $GITHUB_OUTPUT

    - name: Create agent invocation comment
      id: create-comment
      if: inputs.auto-comment == 'true' && inputs.target-number != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const agent = '${{ inputs.agent }}';
          const scenario = '${{ inputs.scenario }}';
          const priority = '${{ inputs.priority }}';
          const targetType = '${{ inputs.target-type }}';
          const targetNumber = '${{ inputs.target-number }}';
          const agentCommand = `${{ steps.generate-context.outputs.agent-command }}`;
          const contextSummary = `${{ steps.generate-context.outputs.context-summary }}`;
          
          // Generate comment based on target type
          const commentBody = `ü§ñ **Gadugi Agent Invocation**
          
          **${contextSummary}**
          
          ### üéØ Agent Assignment
          - **Agent:** \`${agent}\`
          - **Scenario:** \`${scenario}\`
          - **Priority:** ${priority.toUpperCase()}
          - **Trigger:** GitHub Actions automation
          
          ---
          
          ### üöÄ Agent Command
          
          The following command has been prepared for agent processing:
          
          \`\`\`
          ${agentCommand}
          \`\`\`
          
          ### üìã Processing Steps
          
          1. **Automated Analysis**: The agent will analyze this ${targetType}
          2. **Context Integration**: Relevant context has been added to agent memory
          3. **Action Execution**: Agent will take appropriate actions based on scenario
          4. **Result Reporting**: Results will be reported back to this ${targetType}
          
          ### üõ†Ô∏è Manual Invocation
          
          If you need to manually invoke the agent or use a different agent:
          
          **Primary Agent:**
          \`\`\`
          /agent:${agent}
          \`\`\`
          
          **Alternative Agents:**
          \`\`\`
          /agent:code-reviewer     # For code analysis
          /agent:workflow-master   # For workflow orchestration
          /agent:orchestrator-agent # For complex coordination
          /agent:prompt-writer     # For documentation/prompts
          \`\`\`
          
          ---
          
          *ü§ñ This agent invocation was triggered automatically by GitHub Actions*
          *üìù Context and instructions have been recorded in agent memory*
          `;
          
          try {
            if (targetType === 'issue') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(targetNumber),
                body: commentBody
              });
            } else if (targetType === 'pull_request') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(targetNumber),
                body: commentBody,
                event: 'COMMENT'
              });
            }
            
            console.log('‚úÖ Agent invocation comment created successfully');
            return { success: true };
          } catch (error) {
            console.error('‚ùå Failed to create comment:', error);
            return { success: false, error: error.message };
          }

    - name: Log invocation summary
      id: invoke-agent
      shell: bash
      run: |
        echo "=== Gadugi Agent Invocation Summary ==="
        echo "Agent: ${{ inputs.agent }}"
        echo "Scenario: ${{ inputs.scenario }}"
        echo "Priority: ${{ inputs.priority }}"
        echo "Target: ${{ inputs.target-type }}$([ -n "${{ inputs.target-number }}" ] && echo " #${{ inputs.target-number }}")"
        echo "Memory Updated: ${{ steps.update-memory.outputs.success }}"
        echo "Comment Created: ${{ inputs.auto-comment == 'true' && inputs.target-number != '' && 'true' || 'false' }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "====================================="
        
        echo "success=true" >> $GITHUB_OUTPUT