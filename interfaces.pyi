from typing import Any, Generic, Optional, Protocol, TypeVar, List

_T = TypeVar("_T")

# Core interface classes
class AgentInterface: ...
class StateManagerInterface: ...
class GitHubOperationsInterface: ...
class TaskTrackerInterface: ...
class ErrorHandlerInterface: ...

# Core data / configuration models
class AgentConfig: ...
class WorkflowPhase: ...
class TaskData: ...
class StateData: ...
class GitHubIssue: ...
class GitHubPR: ...
class ErrorContext: ...

# Generic helper types
class OperationResult(Generic[_T]): ...
class ValidationResult: ...

# Provider and protocol interfaces
class TodoWriteProvider(Protocol): ...
class LoggerProvider(Protocol): ...
class FileSystemProvider(Protocol): ...
class GitProvider(Protocol): ...

# Schema / factory / registry abstractions
class AgentConfigSchema: ...
class WorkflowConfigSchema: ...
class TaskConfigSchema: ...
class ComponentFactory: ...
class AgentFactory: ...
class ServiceLocator: ...
class EventHandler(Protocol): ...
class EventBus: ...
class ConfigurationManager: ...
class InterfaceRegistry: ...

# Helper functions
def validate_interface_implementation(
    instance: Any, interface_class: type
) -> ValidationResult: ...
def create_operation_result(
    success: bool,
    data: Any = ...,
    error: Optional[str] = ...,
    error_code: Optional[str] = ...,
) -> OperationResult[Any]: ...

__all__: List[str] = []
