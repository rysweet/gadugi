[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "LOG", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "RUF"]
ignore = [
    "ASYNC220", "ASYNC221", "ASYNC230",  # async-related
    "G004",      # f-strings in logging (often acceptable)
    "TRY401",    # verbose log messages (often acceptable)
    "EXE001",    # shebang not executable (often not needed)
    "PLR2004",   # magic values (can be acceptable)
    "ANN401",    # Any type annotations (sometimes needed)
    "D107",      # missing docstring in __init__ (often not needed)
    "D105",      # missing docstring in magic methods (often not needed)
    "PTH123",    # builtin open (pathlib not always better)
    "PTH118",    # os.path.join (pathlib not always better)
    "PTH110",    # os.path.exists (pathlib not always better)
    "PTH120",    # os.path.dirname (pathlib not always better)
    "PTH109",    # os.getcwd (pathlib not always better)
    "PTH103",    # os.makedirs (pathlib not always better)
    "PTH202",    # os.path.getsize (pathlib not always better)
    "DTZ005",    # datetime without timezone (often acceptable)
    "DTZ006",    # datetime fromtimestamp without tz (often acceptable)
    "ARG002",    # unused method arguments (often acceptable for interfaces)
    "ANN001",    # missing type annotations (gradual typing)
    "ANN204",    # missing return type for special methods
    "ANN202",    # missing return type for private functions
    "ANN201",    # missing return type for public functions
    "D102",      # undocumented public method (often acceptable)
    "D101",      # undocumented public class (often acceptable)
    "BLE001",    # blind except (sometimes needed)
    "TRY300",    # try-consider-else (often not worth it)
    "FBT003",    # boolean positional args (sometimes acceptable)
    "FBT001",    # boolean type hint positional (sometimes acceptable)
    "FBT002",    # boolean default positional (sometimes acceptable)
    "S607",      # start process with partial path (often acceptable)
    "S603",      # subprocess without shell=True (often acceptable)
    "PLC0415",   # import outside top level (sometimes needed)
    "D401",      # non-imperative mood in docstrings (often acceptable)
    "PERF401",   # manual list comprehension (sometimes clearer)
    "PERF203",   # try-except in loop (sometimes needed)
    "C901",      # complex structure (sometimes unavoidable)
    "TRY002",    # raise vanilla class (sometimes acceptable)
    "PLR0911",   # too many return statements (sometimes needed)
    "PLR0912",   # too many branches (sometimes needed)
    "B007",      # unused loop control variable (sometimes acceptable)
    "D205",      # missing blank line after summary (formatting preference)
    "F401",      # unused import (sometimes false positive)
    "S108",      # hardcoded temp file (often acceptable for tests)
    "TRY301",    # raise within try (sometimes needed)
    "E402",      # module import not at top (sometimes needed)
    "INP001",    # implicit namespace package (often intentional)
    "LOG015",    # root logger call (sometimes acceptable)
    "S110",      # try-except-pass (sometimes needed)
    "ANN003",    # missing type kwargs (gradual typing)
    "ANN002",    # missing type args (gradual typing)
    "PLR0913",   # too many arguments (sometimes needed)
    "S311",      # non-cryptographic random (often acceptable)
    "SIM102",    # collapsible if (sometimes clearer separate)
]

# Ignore async-related rules in test files since they often use subprocess for git setup
[tool.ruff.lint.per-file-ignores]
"**/tests/*.py" = [
    "ASYNC220", "ASYNC221", "ASYNC230",  # async rules
    "S101",     # assert statements (normal in tests)
    "PLR2004",  # magic values (normal in tests)
    "SLF001",   # private member access (normal in tests)
    "DTZ005",   # datetime without timezone (acceptable in tests)
    "DTZ006",   # datetime fromtimestamp without tz (acceptable in tests)
]
"tests/*.py" = [
    "ASYNC220", "ASYNC221", "ASYNC230",  # async rules
    "S101",     # assert statements (normal in tests)
    "PLR2004",  # magic values (normal in tests)
    "SLF001",   # private member access (normal in tests)
    "DTZ005",   # datetime without timezone (acceptable in tests)
    "DTZ006",   # datetime fromtimestamp without tz (acceptable in tests)
]
"test_*.py" = [
    "ASYNC220", "ASYNC221", "ASYNC230",  # async rules
    "S101",     # assert statements (normal in tests)
    "PLR2004",  # magic values (normal in tests)
    "SLF001",   # private member access (normal in tests)
    "DTZ005",   # datetime without timezone (acceptable in tests)
    "DTZ006",   # datetime fromtimestamp without tz (acceptable in tests)
]
[tool.pyright]
extraPaths = ["src/orchestrator", "services/cli", "services/mcp", "services/neo4j-graph", "services/llm-proxy", "services/event-router"]
pythonVersion = "3.9"
pythonPlatform = "All"
