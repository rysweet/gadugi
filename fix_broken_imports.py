from typing import ' in line and check_typing_usage(content, ' in line:, ' not in import_line:, '), ')[1].strip(), '.join(unique_imports)}", Dict, Dict"), \s*$', line):, line.strip()):, {'

import re

#!/usr/bin/env python3
"""
Fix broken import statements generated by previous scripts
"""

from pathlib import Path

def fix_broken_imports(file_path: Path) -> bool:
    """Fix malformed import statements"""
    try:
        content = file_path.read_text(encoding='utf-8')
        lines = content.split('\n')
        modified = False
        
        new_lines = []
        for line in lines:
            # Fix empty typing imports
            if re.match(r'^                # Skip this line entirely
                modified = True
                continue
            
            # Fix empty unittest.mock imports
            if re.match(r'^from unittest\.mock import\s*$', line.strip()):
                # Skip this line entirely
                modified = True
                continue
            
            # Fix duplicate imports on same line (e.g., "            if '                # Clean up duplicates
                parts = line.split('                if len(parts) == 2:
                    prefix = parts[0]
                    imports_part = parts[1].strip()
                    
                    # Split imports and deduplicate
                    imports = [imp.strip() for imp in imports_part.split(',') if imp.strip()]
                    unique_imports = list(dict.fromkeys(imports))  # Preserve order
                    
                    if unique_imports:
                        new_line = f"{prefix}                        if new_line != line:
                            line = new_line
                            modified = True
                    else:
                        # No valid imports, skip line
                        modified = True
                        continue
            
            # Remove truly unused imports by checking usage in content
            if '                # This import might be unused, but let's be conservative
                pass
            
            new_lines.append(line)
        
        if modified:
            new_content = '\n'.join(new_lines)
            file_path.write_text(new_content, encoding='utf-8')
            return True
        
        return False
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return False

def check_typing_usage(content: str, import_line: str) -> bool:
    """Check if typing imports in the line are actually used"""
    if '        return False
    
    imports_part = import_line.split('    imports = [imp.strip() for imp in imports_part.split(',') if imp.strip()]
    
    unused_imports = []
    for imp in imports:
        # Very basic usage check
        pattern = rf'\b{re.escape(imp)}\b'
        if not re.search(pattern, content.replace(import_line, '')):
            unused_imports.append(imp)
    
    return len(unused_imports) > 0

def fix_duplicate_imports(file_path: Path) -> bool:
    """Fix duplicate import lines at the top of files"""
    try:
        content = file_path.read_text(encoding='utf-8')
        lines = content.split('\n')
        
        # Track and deduplicate import lines
        seen_imports = set()
        new_lines = []
        modified = False
        
        in_import_section = True
        for line in lines:
            if line.strip() == '':
                new_lines.append(line)
                continue
                
            if line.startswith(('import ', 'from ')):
                # Normalize the import line
                normalized = ' '.join(line.split())
                if normalized in seen_imports:
                    # Skip duplicate
                    modified = True
                    continue
                else:
                    seen_imports.add(normalized)
                    new_lines.append(line)
            else:
                # No longer in import section
                in_import_section = False
                new_lines.append(line)
        
        if modified:
            file_path.write_text('\n'.join(new_lines), encoding='utf-8')
            return True
        
        return False
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return False

def main():
    """Main function"""
    target_dir = Path('.')
    
    print("Fixing broken import statements...")
    
    total_fixes = 0
    files_processed = 0
    
    for py_file in target_dir.rglob('*.py'):
        if any(skip in str(py_file) for skip in ['.venv', '__pycache__', '.git', 'node_modules']):
            continue
        
        files_processed += 1
        file_fixes = 0
        
        try:
            if fix_broken_imports(py_file):
                file_fixes += 1
                print(f"  Fixed broken imports: {py_file}")
            
            if fix_duplicate_imports(py_file):
                file_fixes += 1
                print(f"  Fixed duplicate imports: {py_file}")
            
            total_fixes += file_fixes
            
        except Exception as e:
            print(f"  Error processing {py_file}: {e}")
    
    print(f"\nProcessed {files_processed} files")
    print(f"Applied {total_fixes} fixes")

if __name__ == '__main__':
    main()